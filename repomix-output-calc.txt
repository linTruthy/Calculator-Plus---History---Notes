This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-04T08:03:00.872Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.idx/
  dev.nix
  integrations.json
android/
  app/
    src/
      debug/
        AndroidManifest.xml
      main/
        java/
          io/
            flutter/
              plugins/
                GeneratedPluginRegistrant.java
        kotlin/
          com/
            truthysystems/
              calc/
                MainActivity.kt
        res/
          drawable/
            launch_background.xml
          drawable-v21/
            launch_background.xml
          values/
            styles.xml
          values-night/
            styles.xml
        AndroidManifest.xml
      profile/
        AndroidManifest.xml
    build.gradle
  gradle/
    wrapper/
      gradle-wrapper.properties
  .gitignore
  build.gradle
  gradle.properties
  settings.gradle
lib/
  managers/
    ad_manager.dart
    theme_manager.dart
  models/
    history_item.dart
  screens/
    calculator_page.dart
    premium_features_page.dart
    theme_settings_page.dart
  widgets/
    reponsive_widget.dart
  main.dart
test/
  widget_test.dart
web/
  index.html
  manifest.json
.firebaserc
.gitignore
.metadata
analysis_options.yaml
firebase.json
firestore.indexes.json
firestore.rules
pubspec.lock
pubspec.yaml
README.md

================================================================
Repository Files
================================================================

================
File: .idx/dev.nix
================
# To learn more about how to use Nix to configure your environment
# see: https://developers.google.com/idx/guides/customize-idx-env
{ pkgs, ... }: {
  # Which nixpkgs channel to use.
  channel = "stable-23.11"; # or "unstable"
  # Use https://search.nixos.org/packages to find packages
  packages = [
    pkgs.jdk17
    pkgs.unzip
  ];
  # Sets environment variables in the workspace
  env = {};
  idx = {
    # Search for the extensions you want on https://open-vsx.org/ and use "publisher.id"
    extensions = [
      "Dart-Code.flutter"
      "Dart-Code.dart-code"
    ];
    workspace = {
      # Runs when a workspace is first created with this `dev.nix` file
      onCreate = {
        build-flutter = ''
          cd /home/user/myapp/android

          ./gradlew \
            --parallel \
            -Pverbose=true \
            -Ptarget-platform=android-x86 \
            -Ptarget=/home/user/myapp/lib/main.dart \
            -Pbase-application-name=android.app.Application \
            -Pdart-defines=RkxVVFRFUl9XRUJfQ0FOVkFTS0lUX1VSTD1odHRwczovL3d3dy5nc3RhdGljLmNvbS9mbHV0dGVyLWNhbnZhc2tpdC85NzU1MDkwN2I3MGY0ZjNiMzI4YjZjMTYwMGRmMjFmYWMxYTE4ODlhLw== \
            -Pdart-obfuscation=false \
            -Ptrack-widget-creation=true \
            -Ptree-shake-icons=false \
            -Pfilesystem-scheme=org-dartlang-root \
            assembleDebug

          # TODO: Execute web build in debug mode.
          # flutter run does this transparently either way
          # https://github.com/flutter/flutter/issues/96283#issuecomment-1144750411
          # flutter build web --profile --dart-define=Dart2jsOptimization=O0 

          adb -s localhost:5555 wait-for-device
        '';
      };
      
      # To run something each time the workspace is (re)started, use the `onStart` hook
    };
    # Enable previews and customize configuration
    previews = {
      enable = true;
      previews = {
        web = {
          command = ["flutter" "run" "--machine" "-d" "web-server" "--web-hostname" "0.0.0.0" "--web-port" "$PORT"];
          manager = "flutter";
        };
        android = {
          command = ["flutter" "run" "--machine" "-d" "android" "-d" "localhost:5555"];
          manager = "flutter";
        };
      };
    };
  };
}

================
File: .idx/integrations.json
================
{
  "firebase_hosting": {}
}

================
File: android/app/src/debug/AndroidManifest.xml
================
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- The INTERNET permission is required for development. Specifically,
         the Flutter tool needs it to communicate with the running application
         to allow setting breakpoints, to provide hot reload, etc.
    -->
    <uses-permission android:name="android.permission.INTERNET"/>
</manifest>

================
File: android/app/src/main/java/io/flutter/plugins/GeneratedPluginRegistrant.java
================
package io.flutter.plugins;

import androidx.annotation.Keep;
import androidx.annotation.NonNull;
import io.flutter.Log;

import io.flutter.embedding.engine.FlutterEngine;

/**
 * Generated file. Do not edit.
 * This file is generated by the Flutter tool based on the
 * plugins that support the Android platform.
 */
@Keep
public final class GeneratedPluginRegistrant {
  private static final String TAG = "GeneratedPluginRegistrant";
  public static void registerWith(@NonNull FlutterEngine flutterEngine) {
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin shared_preferences_android, io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin", e);
    }
  }
}

================
File: android/app/src/main/kotlin/com/truthysystems/calc/MainActivity.kt
================
package com.truthysystems.calc

import io.flutter.embedding.android.FlutterActivity

class MainActivity: FlutterActivity()

================
File: android/app/src/main/res/drawable/launch_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<!-- Modify this file to customize your launch splash screen -->
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="@android:color/white" />

    <!-- You can insert your own image assets here -->
    <!-- <item>
        <bitmap
            android:gravity="center"
            android:src="@mipmap/launch_image" />
    </item> -->
</layer-list>

================
File: android/app/src/main/res/drawable-v21/launch_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<!-- Modify this file to customize your launch splash screen -->
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="?android:colorBackground" />

    <!-- You can insert your own image assets here -->
    <!-- <item>
        <bitmap
            android:gravity="center"
            android:src="@mipmap/launch_image" />
    </item> -->
</layer-list>

================
File: android/app/src/main/res/values/styles.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is off -->
    <style name="LaunchTheme" parent="@android:style/Theme.Light.NoTitleBar">
        <!-- Show a splash screen on the activity. Automatically removed when
             the Flutter engine draws its first frame -->
        <item name="android:windowBackground">@drawable/launch_background</item>
    </style>
    <!-- Theme applied to the Android Window as soon as the process has started.
         This theme determines the color of the Android Window while your
         Flutter UI initializes, as well as behind your Flutter UI while its
         running.

         This Theme is only used starting with V2 of Flutter's Android embedding. -->
    <style name="NormalTheme" parent="@android:style/Theme.Light.NoTitleBar">
        <item name="android:windowBackground">?android:colorBackground</item>
    </style>
</resources>

================
File: android/app/src/main/res/values-night/styles.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is on -->
    <style name="LaunchTheme" parent="@android:style/Theme.Black.NoTitleBar">
        <!-- Show a splash screen on the activity. Automatically removed when
             the Flutter engine draws its first frame -->
        <item name="android:windowBackground">@drawable/launch_background</item>
    </style>
    <!-- Theme applied to the Android Window as soon as the process has started.
         This theme determines the color of the Android Window while your
         Flutter UI initializes, as well as behind your Flutter UI while its
         running.

         This Theme is only used starting with V2 of Flutter's Android embedding. -->
    <style name="NormalTheme" parent="@android:style/Theme.Black.NoTitleBar">
        <item name="android:windowBackground">?android:colorBackground</item>
    </style>
</resources>

================
File: android/app/src/main/AndroidManifest.xml
================
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <application
        android:label="Calculator Plus - History n Notes"
        android:name="${applicationName}"
        android:icon="@mipmap/ic_launcher">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:taskAffinity=""
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- Specifies an Android theme to apply to this Activity as soon as
                 the Android process has started. This theme is visible to the user
                 while the Flutter UI initializes. After that, this theme continues
                 to determine the Window background behind the Flutter UI. -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
              />
             <meta-data
            android:name="com.google.android.gms.ads.APPLICATION_ID"
            android:value="ca-app-pub-8267064683737776~8952876532"/>
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <!-- Don't delete the meta-data below.
             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />
    </application>
    <!-- Required to query activities that can process text, see:
         https://developer.android.com/training/package-visibility and
         https://developer.android.com/reference/android/content/Intent#ACTION_PROCESS_TEXT.

         In particular, this is used by the Flutter engine in io.flutter.plugin.text.ProcessTextPlugin. -->
    <queries>
        <intent>
            <action android:name="android.intent.action.PROCESS_TEXT"/>
            <data android:mimeType="text/plain"/>
        </intent>
    </queries>
</manifest>

================
File: android/app/src/profile/AndroidManifest.xml
================
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- The INTERNET permission is required for development. Specifically,
         the Flutter tool needs it to communicate with the running application
         to allow setting breakpoints, to provide hot reload, etc.
    -->
    <uses-permission android:name="android.permission.INTERNET"/>
</manifest>

================
File: android/app/build.gradle
================
plugins {
    id "com.android.application"
    id "kotlin-android"
    // id 'com.google.gms.google-services'
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

android {
    namespace = "com.truthysystems.calc"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.truthysystems.calc"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}

================
File: android/gradle/wrapper/gradle-wrapper.properties
================
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.3-all.zip

================
File: android/.gitignore
================
gradle-wrapper.jar
/.gradle
/captures/
/gradlew
/gradlew.bat
/local.properties
GeneratedPluginRegistrant.java

# Remember to never publicly share your keystore.
# See https://flutter.dev/to/reference-keystore
key.properties
**/*.keystore
**/*.jks

================
File: android/build.gradle
================
allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.buildDir = "../build"
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}
subprojects {
    project.evaluationDependsOn(":app")
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}

================
File: android/gradle.properties
================
org.gradle.jvmargs=-Xmx4G -XX:MaxMetaspaceSize=2G -XX:+HeapDumpOnOutOfMemoryError
android.useAndroidX=true
android.enableJetifier=true
gradle.user.home=/home/user/.gradle
org.gradle.caching=true

================
File: android/settings.gradle
================
pluginManagement {
    def flutterSdkPath = {
        def properties = new Properties()
        file("local.properties").withInputStream { properties.load(it) }
        def flutterSdkPath = properties.getProperty("flutter.sdk")
        assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
        return flutterSdkPath
    }()

    includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id "dev.flutter.flutter-plugin-loader" version "1.0.0"
    id "com.android.application" version "8.1.0" apply false
    // id "com.google.gms.google-services" version "4.3.15" apply false
    id "org.jetbrains.kotlin.android" version "1.8.22" apply false
}

include ":app"

================
File: lib/managers/ad_manager.dart
================
// import 'package:easy_ads_flutter/easy_ads_flutter.dart';
// import 'package:flutter/cupertino.dart';
// import 'package:shared_preferences/shared_preferences.dart';
// import 'package:firebase_analytics/firebase_analytics.dart';
// import 'dart:io' show Platform;

// // Test Ad IDs Map
// final Map<String, Map<String, String>> testIds = {
//   'android': {
//     'app_id': 'ca-app-pub-3940256099942544~3347511713',
//     'banner': 'ca-app-pub-3940256099942544/6300978111',
//     'interstitial': 'ca-app-pub-3940256099942544/1033173712',
//     'native': 'ca-app-pub-3940256099942544/2247696110',
//     'rewarded': 'ca-app-pub-3940256099942544/5224354917',
//     'rewarded_interstitial': 'ca-app-pub-3940256099942544/5354046379',
//   },
//   'ios': {
//     'app_id': 'ca-app-pub-3940256099942544~1458002511',
//     'banner': 'ca-app-pub-3940256099942544/2934735716',
//     'interstitial': 'ca-app-pub-3940256099942544/4411468910',
//     'native': 'ca-app-pub-3940256099942544/3986624511',
//     'rewarded': 'ca-app-pub-3940256099942544/1712485313',
//     'rewarded_interstitial': 'ca-app-pub-3940256099942544/6978759866',
//   },
// };

// // Premium Features Enum
enum PremiumFeature {
  noAds,
  historyExport,
  customThemes,
  cloudBackup,
  scientificMode,
  currencyConverter
}

// class AdAnalytics {
//   final String adType;
//   final String placement;
//   final DateTime timestamp;
//   final bool wasShown;
//   final bool wasClicked;
//   final double revenue;

//   AdAnalytics({
//     required this.adType,
//     required this.placement,
//     required this.timestamp,
//     required this.wasShown,
//     required this.wasClicked,
//     this.revenue = 0.0,
//   });

//   Map<String, Object> toJson() => {
//         'adType': adType,
//         'placement': placement,
//         'timestamp': timestamp.toIso8601String(),
//         'wasShown': wasShown,
//         'wasClicked': wasClicked,
//         'revenue': revenue,
//       };
// }

// class UserSegment {
//   final bool isPremium;
//   final int calculationsPerDay;
//   final int daysActive;
//   final List<String> featuresUsed;
//   final String userRegion;

//   UserSegment({
//     required this.isPremium,
//     required this.calculationsPerDay,
//     required this.daysActive,
//     required this.featuresUsed,
//     required this.userRegion,
//   });
// }

// class AdManager {
//   static AdManager? _instance;
//   final FirebaseAnalytics _analytics = FirebaseAnalytics.instance;
//   final SharedPreferences _prefs;

//   bool _isPremium = false;
//   final Map<PremiumFeature, bool> _unlockedFeatures = {};
//   final List<AdAnalytics> _adAnalytics = [];
//   DateTime? _firstUseDate;
//   int _totalCalculations = 0;
//   UserSegment? _userSegment;

//   static AdManager get instance => _instance!;

//   AdManager._(this._prefs) {
//     _loadPremiumStatus();
//     _loadAnalytics();
//     _initializeUserSegment();
//   }

//   static Future<void> initialize() async {
//     final prefs = await SharedPreferences.getInstance();
//     _instance = AdManager._(prefs);
//     await _instance!._initializeAds();
//   }

//   Future<void> _initializeAds() async {
//     final adsIdMap = <AdNetwork, Map<String, String>>{
//       AdNetwork.admob: Platform.isAndroid ? testIds['android']! : testIds['ios']!,
//     };

//     final adConfig = EasyAdsConfig()
//       ..adNetwork = AdNetwork.admob
//       ..isDebug = true
//       ..adsIdMap = adsIdMap
//       ..testDeviceIds = ['test-device-id']  // Add your test device IDs
//       ..initialize(
//         bannerAdEnabled: true,
//         interstitialAdEnabled: true,
//         nativeAdEnabled: true,
//         rewardedAdEnabled: true,
//       );

//     await EasyAds.instance.initialize(adConfig);
    
//     // Set up ad listeners
//     EasyAds.instance.setEventListener(
//       EasyAdsEventListener(
//         onAdLoaded: (adType, data) => _logAdEvent(
//           AdAnalytics(
//             adType: adType.name,
//             placement: 'default',
//             timestamp: DateTime.now(),
//             wasShown: true,
//             wasClicked: false,
//           ),
//         ),
//         onAdClicked: (adType, data) => _logAdEvent(
//           AdAnalytics(
//             adType: adType.name,
//             placement: 'default',
//             timestamp: DateTime.now(),
//             wasShown: true,
//             wasClicked: true,
//           ),
//         ),
//       ),
//     );
//   }

//   Future<void> _loadAnalytics() async {
//     _firstUseDate = DateTime.parse(
//         _prefs.getString('first_use_date') ?? DateTime.now().toIso8601String());
//     _totalCalculations = _prefs.getInt('total_calculations') ?? 0;
//   }

//   Future<void> _loadPremiumStatus() async {
//     _isPremium = _prefs.getBool('is_premium') ?? false;
//     final unlockedFeatures = _prefs.getStringList('unlocked_features') ?? [];
    
//     for (final feature in unlockedFeatures) {
//       _unlockedFeatures[PremiumFeature.values
//           .firstWhere((e) => e.toString() == feature)] = true;
//     }
//   }

//   // UI Components with Cupertino styling
//   Widget buildAdBanner() {
//     if (_isPremium) return const SizedBox.shrink();

//     return Container(
//       margin: const EdgeInsets.symmetric(vertical: 8),
//       decoration: BoxDecoration(
//         color: CupertinoColors.systemBackground,
//         borderRadius: BorderRadius.circular(12),
//         boxShadow: [
//           BoxShadow(
//             color: CupertinoColors.systemGrey.withOpacity(0.1),
//             blurRadius: 10,
//             offset: const Offset(0, 2),
//           ),
//         ],
//       ),
//       child: ClipRRect(
//         borderRadius: BorderRadius.circular(12),
//         child: const EasyBannerAd(
//           adNetwork: AdNetwork.admob,
//           adSize: AdSize.banner,
//         ),
//       ),
//     );
//   }

//   Widget buildNativeAd() {
//     if (_isPremium) return const SizedBox.shrink();

//     return Container(
//       margin: const EdgeInsets.all(16),
//       decoration: BoxDecoration(
//         color: CupertinoColors.systemBackground,
//         borderRadius: BorderRadius.circular(12),
//         boxShadow: [
//           BoxShadow(
//             color: CupertinoColors.systemGrey.withOpacity(0.1),
//             blurRadius: 10,
//             offset: const Offset(0, 2),
//           ),
//         ],
//       ),
//       child: ClipRRect(
//         borderRadius: BorderRadius.circular(12),
//         child: const EasyNativeAd(
//           adNetwork: AdNetwork.admob,
//           factoryId: 'calculatorTip',
//         ),
//       ),
//     );
//   }

//   Widget buildPremiumFeatureButton(
//       PremiumFeature feature, VoidCallback onUnlocked) {
//     return CupertinoButton.filled(
//       onPressed: () => _showRewardedAdForFeature(feature, onUnlocked),
//       child: Text(
//         'Unlock ${feature.toString().split('.').last}',
//         style: const TextStyle(
//           fontFamily: '.SF Pro Text',
//           fontSize: 16,
//           fontWeight: FontWeight.w500,
//         ),
//       ),
//     );
//   }

//   // Ad Display Methods
//   Future<void> _showRewardedAdForFeature(
//       PremiumFeature feature, VoidCallback onUnlocked) async {
//     if (_isPremium) {
//       onUnlocked();
//       return;
//     }

//     final result =  EasyAds.instance.isRewardedAdLoaded();
//     if (result) {
//       await unlockFeature(feature);
//       onUnlocked();
//     }
//   }

//   Future<void> showInterstitial() async {
//     if (!_isPremium) {
//        EasyAds.instance.showAd(
//        AdUnitType.interstitial,
//        adNetwork: AdNetwork.any
//       );
//     }
//     }
//   }
  
//   class EasyAdsConfig {
//     AdNetwork? adNetwork;
  
//     bool? isDebug;
  
//     Map<AdNetwork, Map<String, String>>? adsIdMap;
  
//     List<String>? testDeviceIds;

//   }

//   // Premium Features Management
//   Future<void> unlockFeature(PremiumFeature feature) async {
//     _unlockedFeatures[feature] = true;
//     await _savePremiumFeatures();
//     _logFeatureUnlock(feature);
//   }

//   bool hasFeature(PremiumFeature feature) {
//     return _isPremium || _unlockedFeatures[feature] == true;
//   }

//   Future<void> _savePremiumFeatures() async {
//     await _prefs.setStringList(
//       'unlocked_features',
//       _unlockedFeatures.entries
//           .where((entry) => entry.value)
//           .map((entry) => entry.key.toString())
//           .toList(),
//     );
//   }

//   void _logFeatureUnlock(PremiumFeature feature) {
//     _analytics.logEvent(
//       name: 'feature_unlock',
//       parameters: {
//         'feature': feature.toString(),
//         'method': 'rewarded_ad',
//         'timestamp': DateTime.now().toIso8601String(),
//       },
//     );
//   }

//   void _logAdEvent(AdAnalytics analytics) {
//     _adAnalytics.add(analytics);
//     _analytics.logEvent(
//       name: 'ad_event',
//       parameters: analytics.toJson(),
//     );
//   }

//   Future<void> _initializeUserSegment() async {
//     final region = await _determineUserRegion();
//     final featuresUsed = _prefs.getStringList('features_used') ?? [];
    
//     _userSegment = UserSegment(
//       isPremium: _isPremium,
//       calculationsPerDay: _getAverageCalculationsPerDay(),
//       daysActive: _daysSinceFirstUse(),
//       featuresUsed: featuresUsed,
//       userRegion: region,
//     );
//   }

//   Future<String> _determineUserRegion() async {
//     // Implement region detection logic
//     return 'unknown';
//   }

//   int _getAverageCalculationsPerDay() {
//     final days = _daysSinceFirstUse();
//     return days > 0 ? (_totalCalculations / days).round() : 0;
//   }

//   int _daysSinceFirstUse() {
//     if (_firstUseDate == null) return 0;
//     return DateTime.now().difference(_firstUseDate!).inDays;
//   }

//   // Analytics reporting
//   Map<String, dynamic> getAnalyticsReport() {
//     return {
//       'total_ads_shown': _adAnalytics.where((a) => a.wasShown).length,
//       'total_clicks': _adAnalytics.where((a) => a.wasClicked).length,
//       'total_revenue': _adAnalytics.fold(0.0, (sum, a) => sum + a.revenue),
//       'ads_by_type': _getAdsByType(),
//       'user_segment': {
//         'premium': _isPremium,
//         'days_active': _daysSinceFirstUse(),
//         'calculations_per_day': _getAverageCalculationsPerDay(),
//         'region': _userSegment?.userRegion,
//       },
//     };
//   }

//   Map<String, int> _getAdsByType() {
//     final adsByType = <String, int>{};
//     for (final analytics in _adAnalytics) {
//       adsByType[analytics.adType] = (adsByType[analytics.adType] ?? 0) + 1;
//     }
//     return adsByType;
//   }
// }

================
File: lib/managers/theme_manager.dart
================
import 'package:flutter/cupertino.dart';
import 'package:shared_preferences/shared_preferences.dart';



// Theme configuration class
class AppThemeConfig {
  final String id;
  final String name;
  final Color primaryColor;
  final Color secondaryColor;
  final Color backgroundColor;
  final Color textColor;
  final Color dividerColor;
  final Color buttonColor;
  final Color buttonTextColor;
  final Color displayColor;
  final Color displayTextColor;
  final Color historyBackgroundColor;
  final Color historyTextColor;

  const AppThemeConfig({
    required this.id,
    required this.name,
    required this.primaryColor,
    required this.secondaryColor,
    required this.backgroundColor,
    required this.textColor,
    required this.dividerColor,
    required this.buttonColor,
    required this.buttonTextColor,
    required this.displayColor,
    required this.displayTextColor,
    required this.historyBackgroundColor,
    required this.historyTextColor,
  });

  // Convert theme to JSON for storage
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'primaryColor': primaryColor.value,
      'secondaryColor': secondaryColor.value,
      'backgroundColor': backgroundColor.value,
      'textColor': textColor.value,
      'dividerColor': dividerColor.value,
      'buttonColor': buttonColor.value,
      'buttonTextColor': buttonTextColor.value,
      'displayColor': displayColor.value,
      'displayTextColor': displayTextColor.value,
      'historyBackgroundColor': historyBackgroundColor.value,
      'historyTextColor': historyTextColor.value,
    };
  }

  // Create theme from JSON
  factory AppThemeConfig.fromJson(Map<String, dynamic> json) {
    return AppThemeConfig(
      id: json['id'],
      name: json['name'],
      primaryColor: Color(json['primaryColor']),
      secondaryColor: Color(json['secondaryColor']),
      backgroundColor: Color(json['backgroundColor']),
      textColor: Color(json['textColor']),
      dividerColor: Color(json['dividerColor']),
      buttonColor: Color(json['buttonColor']),
      buttonTextColor: Color(json['buttonTextColor']),
      displayColor: Color(json['displayColor']),
      displayTextColor: Color(json['displayTextColor']),
      historyBackgroundColor: Color(json['historyBackgroundColor']),
      historyTextColor: Color(json['historyTextColor']),
    );
  }

  // Create a copy of theme with modifications
  AppThemeConfig copyWith({
    String? id,
    String? name,
    Color? primaryColor,
    Color? secondaryColor,
    Color? backgroundColor,
    Color? textColor,
    Color? dividerColor,
    Color? buttonColor,
    Color? buttonTextColor,
    Color? displayColor,
    Color? displayTextColor,
    Color? historyBackgroundColor,
    Color? historyTextColor,
  }) {
    return AppThemeConfig(
      id: id ?? this.id,
      name: name ?? this.name,
      primaryColor: primaryColor ?? this.primaryColor,
      secondaryColor: secondaryColor ?? this.secondaryColor,
      backgroundColor: backgroundColor ?? this.backgroundColor,
      textColor: textColor ?? this.textColor,
      dividerColor: dividerColor ?? this.dividerColor,
      buttonColor: buttonColor ?? this.buttonColor,
      buttonTextColor: buttonTextColor ?? this.buttonTextColor,
      displayColor: displayColor ?? this.displayColor,
      displayTextColor: displayTextColor ?? this.displayTextColor,
      historyBackgroundColor: historyBackgroundColor ?? this.historyBackgroundColor,
      historyTextColor: historyTextColor ?? this.historyTextColor,
    );
  }
}

// Theme Manager
class ThemeManager extends ChangeNotifier {
  static const String _themePreferenceKey = 'selected_theme';
  static const String _isDarkModeKey = 'is_dark_mode';
  
  late SharedPreferences _prefs;
  bool _isDarkMode = false;
  String _currentThemeId = 'default';
  
  // Predefined themes
  final Map<String, AppThemeConfig> _themes = {
    'default': const AppThemeConfig(
      id: 'default',
      name: 'Default Light',
      primaryColor: CupertinoColors.systemBlue,
      secondaryColor: CupertinoColors.systemGrey,
      backgroundColor: CupertinoColors.systemBackground,
      textColor: CupertinoColors.black,
      dividerColor: CupertinoColors.separator,
      buttonColor: CupertinoColors.systemGrey6,
      buttonTextColor: CupertinoColors.black,
      displayColor: CupertinoColors.white,
      displayTextColor: CupertinoColors.black,
      historyBackgroundColor: CupertinoColors.systemBackground,
      historyTextColor: CupertinoColors.black,
    ),
    'default_dark': AppThemeConfig(
      id: 'default_dark',
      name: 'Default Dark',
      primaryColor: CupertinoColors.systemBlue,
      secondaryColor: CupertinoColors.systemGrey,
      backgroundColor: CupertinoColors.black,
      textColor: CupertinoColors.white,
      dividerColor: CupertinoColors.separator,
      buttonColor: CupertinoColors.systemGrey6.darkColor,
      buttonTextColor: CupertinoColors.white,
      displayColor: CupertinoColors.black,
      displayTextColor: CupertinoColors.white,
      historyBackgroundColor: CupertinoColors.black,
      historyTextColor: CupertinoColors.white,
    ),
    'blue': AppThemeConfig(
      id: 'blue',
      name: 'Blue Theme',
      primaryColor: CupertinoColors.systemBlue,
      secondaryColor: CupertinoColors.systemIndigo,
      backgroundColor: const Color(0xFFF5F9FF),
      textColor: CupertinoColors.black,
      dividerColor: CupertinoColors.systemBlue.withOpacity(0.2),
      buttonColor: CupertinoColors.white,
      buttonTextColor: CupertinoColors.black,
      displayColor: CupertinoColors.white,
      displayTextColor: CupertinoColors.black,
      historyBackgroundColor: CupertinoColors.white,
      historyTextColor: CupertinoColors.black,
    ),
    'dark_blue': AppThemeConfig(
      id: 'dark_blue',
      name: 'Dark Blue Theme',
      primaryColor: CupertinoColors.systemBlue,
      secondaryColor: CupertinoColors.systemIndigo,
      backgroundColor: const Color(0xFF1A1B1E),
      textColor: CupertinoColors.white,
      dividerColor: CupertinoColors.systemBlue.withOpacity(0.2),
      buttonColor: const Color(0xFF2D2F34),
      buttonTextColor: CupertinoColors.white,
      displayColor: const Color(0xFF2D2F34),
      displayTextColor: CupertinoColors.white,
      historyBackgroundColor: const Color(0xFF2D2F34),
      historyTextColor: CupertinoColors.white,
    ),
  };

  // Singleton pattern
  static final ThemeManager _instance = ThemeManager._internal();
  
  factory ThemeManager() {
    return _instance;
  }
  
  ThemeManager._internal();

  // Initialize theme manager
  Future<void> initialize() async {
    _prefs = await SharedPreferences.getInstance();
    _loadThemePreferences();
  }

  // Load saved theme preferences
  void _loadThemePreferences() {
    _isDarkMode = _prefs.getBool(_isDarkModeKey) ?? false;
    _currentThemeId = _prefs.getString(_themePreferenceKey) ?? 
      (_isDarkMode ? 'default_dark' : 'default');
    notifyListeners();
  }

  // Get current theme
  AppThemeConfig get currentTheme {
    return _themes[_currentThemeId] ?? _themes['default']!;
  }

  // Get all available themes
  List<AppThemeConfig> get availableThemes {
    return _isDarkMode 
      ? _themes.values.where((theme) => theme.id.contains('dark')).toList()
      : _themes.values.where((theme) => !theme.id.contains('dark')).toList();
  }

  // Check if dark mode is enabled
  bool get isDarkMode => _isDarkMode;

  // Toggle dark mode
  Future<void> toggleDarkMode() async {
    _isDarkMode = !_isDarkMode;
    await _prefs.setBool(_isDarkModeKey, _isDarkMode);
    
    // Switch to corresponding theme
    if (_isDarkMode && !_currentThemeId.contains('dark')) {
      await setTheme('default_dark');
    } else if (!_isDarkMode && _currentThemeId.contains('dark')) {
      await setTheme('default');
    }
    
    notifyListeners();
  }

  // Set theme by ID
  Future<void> setTheme(String themeId) async {
    if (_themes.containsKey(themeId)) {
      _currentThemeId = themeId;
      await _prefs.setString(_themePreferenceKey, themeId);
      notifyListeners();
    }
  }

  // Add custom theme
  void addCustomTheme(AppThemeConfig theme) {
    _themes[theme.id] = theme;
    notifyListeners();
  }
}

// Theme Provider
class ThemeProvider extends StatelessWidget {
  final Widget child;
  final ThemeManager themeManager;

  const ThemeProvider({
    super.key,
    required this.child,
    required this.themeManager,
  });

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: themeManager,
      builder: (context, _) {
        return CupertinoTheme(
          data: CupertinoThemeData(
            brightness: themeManager.isDarkMode ? Brightness.dark : Brightness.light,
            primaryColor: themeManager.currentTheme.primaryColor,
            scaffoldBackgroundColor: themeManager.currentTheme.backgroundColor,
            textTheme: CupertinoTextThemeData(
              primaryColor: themeManager.currentTheme.textColor,
            ),
          ),
          child: child,
        );
      },
    );
  }
}

================
File: lib/models/history_item.dart
================
class HistoryItem {
  final String equation;
  final double result;
  final DateTime timestamp;
  final String? name;

  HistoryItem({
    required this.equation,
    required this.result,
    required this.timestamp,
    this.name,
  });
}

================
File: lib/screens/calculator_page.dart
================
import 'package:flutter/cupertino.dart';
import 'package:intl/intl.dart';
import 'package:myapp/models/history_item.dart';
import '../managers/theme_manager.dart';
import '../widgets/reponsive_widget.dart';
import 'theme_settings_page.dart';

class CalculatorPage extends StatefulWidget {
  const CalculatorPage({super.key});

  @override
  State<CalculatorPage> createState() => _CalculatorPageState();
}

class _CalculatorPageState extends State<CalculatorPage>
    with SingleTickerProviderStateMixin {
  String _display = '0';
  String _equation = '';
  double _result = 0;
  List<HistoryItem> _history = [];
  final TextEditingController _nameController = TextEditingController();
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  bool _isHistoryVisible = false;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.easeInOut),
    );
    _animationController.forward();
  }

  @override
  void dispose() {
    _animationController.dispose();
    _nameController.dispose();
    super.dispose();
  }

  void _addNumber(String number) {
    _animationController.reset();
    _animationController.forward();
    setState(() {
      if (_display == '0') {
        _display = number;
      } else {
        _display += number;
      }
      _equation = _display;
    });
  }

  void _addOperator(String operator) {
    _animationController.reset();
    _animationController.forward();
    setState(() {
      _display += ' $operator ';
      _equation = _display;
    });
  }

  void _calculate() {
    try {
      final parts = _equation.split(' ');
      if (parts.length >= 3) {
        final num1 = double.parse(parts[0]);
        final operator = parts[1];
        final num2 = double.parse(parts[2]);

        switch (operator) {
          case '+':
            _result = num1 + num2;
            break;
          case '-':
            _result = num1 - num2;
            break;
          case '×':
            _result = num1 * num2;
            break;
          case '÷':
            if (num2 != 0) {
              _result = num1 / num2;
            } else {
              throw Exception('Division by zero');
            }
            break;
        }

        _animationController.reset();
        _animationController.forward();

        setState(() {
          _display = _formatResult(_result);
          _addToHistory();
          _equation = _result.toString();
        });
      }
    } catch (e) {
      setState(() {
        _display =
            e.toString().contains('zero') ? 'Cannot divide by zero' : 'Error';
      });
    }
  }

  String _formatResult(double value) {
    if (value == value.roundToDouble()) {
      return value.toInt().toString();
    }
    return value
        .toStringAsFixed(6)
        .replaceAll(RegExp(r'0*$'), '')
        .replaceAll(RegExp(r'\.$'), '');
  }

  void _clear() {
    _animationController.reset();
    _animationController.forward();
    setState(() {
      _display = '0';
      _equation = '';
      _result = 0;
    });
  }

  void _addToHistory() {
    showCupertinoModalPopup(
      context: context,
      builder: (context) => CupertinoActionSheet(
        title: const Text('Save Calculation'),
        message: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          child: CupertinoTextField(
            controller: _nameController,
            placeholder: 'Enter a name (optional)',
            decoration: BoxDecoration(
              color: CupertinoColors.systemBackground,
              borderRadius: BorderRadius.circular(8),
            ),
          ),
        ),
        actions: [
          CupertinoActionSheetAction(
            onPressed: () {
              Navigator.pop(context);
              _saveToHistory(_nameController.text);
            },
            child: const Text('Save'),
          ),
        ],
        cancelButton: CupertinoActionSheetAction(
          onPressed: () {
            Navigator.pop(context);
            _saveToHistory('');
          },
          isDestructiveAction: true,
          child: const Text('Skip'),
        ),
      ),
    );
  }

  void _saveToHistory(String name) {
    setState(() {
      _history.insert(
        0,
        HistoryItem(
          equation: _equation,
          result: _result,
          timestamp: DateTime.now(),
          name: name.isNotEmpty ? name : null,
        ),
      );
      _nameController.clear();
    });
  }

  void _recallHistory(HistoryItem item) {
    _animationController.reset();
    _animationController.forward();
    setState(() {
      _display = item.result.toString();
      _equation = item.result.toString();
      _result = item.result;
      _isHistoryVisible = false;
    });
  }

  void _deleteHistoryItem(int index) {
    setState(() {
      _history.removeAt(index);
    });
  }

  @override
  Widget build(BuildContext context) {
    final theme = ThemeManager().currentTheme;

    return CupertinoPageScaffold(
      backgroundColor: theme.backgroundColor,
      navigationBar: CupertinoNavigationBar(
        middle: const Text('Calculator'),
        trailing: _buildNavigationButtons(theme),
      ),
      child: ResponsiveLayout(
        padding: EdgeInsets.zero,
        child: ScrollConfiguration(
          behavior: SpringScrollConfiguration(),
          child: Stack(
            children: [
              Column(
                children: [
                  _buildDisplay(theme),
                  Expanded(
                    flex: 4,
                    child: AdaptiveCard(
                      padding: const EdgeInsets.all(8),
                      borderRadius: 20,
                      backgroundColor: theme.backgroundColor,
                      child: _buildKeypad(theme),
                    ),
                  ),
                ],
              ),
              if (_isHistoryVisible) _buildHistoryPanel(theme),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildKeypad(AppThemeConfig theme) {
    return ResponsiveGrid(
      spacing: 8,
      runSpacing: 8,
      minCrossAxisCount: 4,
      maxCrossAxisCount: 4,
      children: [
        ...['7', '8', '9', '÷'],
        ...['4', '5', '6', '×'],
        ...['1', '2', '3', '-'],
        ...['C', '0', '=', '+'],
      ].map((button) => _buildButton(button, theme)).toList(),
    );
  }

  Widget _buildDisplay(AppThemeConfig theme) {
    return Expanded(
      flex: 2,
      child: AdaptiveCard(
        //  margin: const EdgeInsets.all(16),
        padding: const EdgeInsets.all(20),
        backgroundColor: theme.displayColor,
        boxShadow: [
          BoxShadow(
            color: theme.primaryColor.withOpacity(0.1),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
        child: Column(
          mainAxisAlignment: MainAxisAlignment.end,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text(
              _equation,
              style: TextStyle(
                fontSize: 20,
                color: theme.displayTextColor.withOpacity(0.7),
              ),
              textAlign: TextAlign.right,
            ),
            const SizedBox(height: 8),
            FadeTransition(
              opacity: _fadeAnimation,
              child: Text(
                _display,
                style: TextStyle(
                  fontSize: 48,
                  fontWeight: FontWeight.bold,
                  color: theme.displayTextColor,
                ),
                textAlign: TextAlign.right,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildNavigationButtons(AppThemeConfig theme) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        BouncingButton(
          onPressed: () {
            setState(() {
              _isHistoryVisible = !_isHistoryVisible;
            });
          },
          child: Icon(
            _isHistoryVisible
                ? CupertinoIcons.chevron_down
                : CupertinoIcons.clock,
            color: theme.primaryColor,
          ),
        ),
        const SizedBox(width: 8),
        BouncingButton(
          onPressed: () {
            Navigator.push(
              context,
              CustomPageRoute(child: const ThemeSettingsPage()),
            );
          },
          child: Icon(
            CupertinoIcons.settings,
            color: theme.primaryColor,
          ),
        ),
      ],
    );
  }

  Widget _buildHistoryPanel(AppThemeConfig theme) {
    return AdaptiveCard(
      backgroundColor: theme.historyBackgroundColor,
      borderRadius: 16,
      child: Column(
        children: [
          Expanded(
            child: CupertinoScrollbar(
              child: ListView.builder(
                itemCount: _history.length,
                itemBuilder: (context, index) {
                  final item = _history[index];
                  return Dismissible(
                    key: Key('history_$index'),
                    direction: DismissDirection.endToStart,
                    background: Container(
                      alignment: Alignment.centerRight,
                      color: CupertinoColors.destructiveRed,
                      padding: const EdgeInsets.only(right: 20),
                      child: const Icon(
                        CupertinoIcons.delete,
                        color: CupertinoColors.white,
                      ),
                    ),
                    onDismissed: (direction) => _deleteHistoryItem(index),
                    child: CupertinoListTile(
                      onTap: () => _recallHistory(item),
                      title: Text(
                        item.name ?? 'Calculation ${_history.length - index}',
                        style: TextStyle(
                          color: theme.historyTextColor,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      subtitle: Text(
                        '${item.equation} = ${_formatResult(item.result)}\n${DateFormat('MMM d, y HH:mm').format(item.timestamp)}',
                        style: TextStyle(
                          color: theme.historyTextColor.withOpacity(0.8),
                        ),
                      ),
                      trailing: const CupertinoListTileChevron(),
                    ),
                  );
                },
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Widget _buildButtonRow(List<String> buttons) {
  //   return Expanded(
  //     child: Row(
  //       crossAxisAlignment: CrossAxisAlignment.stretch,
  //       children: buttons.map((button) => _buildButton(button)).toList(),
  //     ),
  //   );
  // }

  Widget _buildButton(String text, AppThemeConfig theme) {
    final isOperator = _isOperator(text);
    final isClear = text == 'C';

    return AdaptiveButton(
      text: text,
      backgroundColor: isOperator
          ? theme.primaryColor
          : isClear
              ? theme.secondaryColor
              : theme.buttonColor,
      textColor:
          isOperator || isClear ? CupertinoColors.white : theme.buttonTextColor,
      onPressed: () {
        switch (text) {
          case '=':
            _calculate();
            break;
          case 'C':
            _clear();
            break;
          case '+':
          case '-':
          case '×':
          case '÷':
            _addOperator(text);
            break;
          default:
            _addNumber(text);
        }
      },
    );
  }

  bool _isOperator(String text) {
    return ['+', '-', '×', '÷', '='].contains(text);
  }
}

================
File: lib/screens/premium_features_page.dart
================
// import 'package:flutter/cupertino.dart';
// import 'package:myapp/ad_manager.dart';

// class PremiumFeaturesPage extends StatelessWidget {
//   const PremiumFeaturesPage({super.key});

//   @override
//   Widget build(BuildContext context) {
//     return CupertinoPageScaffold(
//       navigationBar: const CupertinoNavigationBar(
//         middle: Text('Premium Features'),
//       ),
//       child: SafeArea(
//         child: ListView(
//           children: PremiumFeature.values.map((feature) {
//             return CupertinoListTile(
//               title: Text(_getFeatureTitle(feature)),
//               subtitle: Text(_getFeatureDescription(feature)),
//               trailing: AdManager.instance.hasFeature(feature)
//                   ? const Icon(CupertinoIcons.check_mark_circled, color: CupertinoColors.activeGreen)
//                   : CupertinoButton(
//                       padding: EdgeInsets.zero,
//                       child: const Text('Unlock'),
//                       onPressed: () => AdManager.instance.showPremiumFeaturePromo(feature),
//                     ),
//             );
//           }).toList(),
//         ),
//       ),
//     );
//   }

//   String _getFeatureTitle(PremiumFeature feature) {
//     switch (feature) {
//       case PremiumFeature.noAds:
//         return 'Ad-Free Experience';
//       case PremiumFeature.historyExport:
//         return 'Export History';
//       case PremiumFeature.customThemes:
//         return 'Custom Themes';
//       case PremiumFeature.cloudBackup:
//         return 'Cloud Backup';
//       case PremiumFeature.scientificMode:
//         return 'Scientific Calculator';
//       case PremiumFeature.currencyConverter:
//         return 'Currency Converter';
//     }
//   }

//   String _getFeatureDescription(PremiumFeature feature) {
//     switch (feature) {
//       case PremiumFeature.noAds:
//         return 'Remove all advertisements';
//       case PremiumFeature.historyExport:
//         return 'Export calculation history to CSV or PDF';
//       case PremiumFeature.customThemes:
//         return 'Create and save custom calculator themes';
//       case PremiumFeature.cloudBackup:
//         return 'Backup your history and settings to the cloud';
//       case PremiumFeature.scientificMode:
//         return 'Access advanced scientific calculator functions';
//       case PremiumFeature.currencyConverter:
//         return 'Convert between different currencies';
//     }
//   }
// }

================
File: lib/screens/theme_settings_page.dart
================
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:myapp/managers/theme_manager.dart';

import '../widgets/reponsive_widget.dart';

class ThemeSettingsPage extends StatelessWidget {
  const ThemeSettingsPage({super.key});

  @override
  Widget build(BuildContext context) {
    final themeManager = ThemeManager();
    final theme = themeManager.currentTheme;

    return CupertinoPageScaffold(
      backgroundColor: theme.backgroundColor,
      navigationBar: CupertinoNavigationBar(
        backgroundColor: theme.backgroundColor.withOpacity(0.9),
        middle: Text(
          'Theme Settings',
          style: TextStyle(color: theme.textColor),
        ),
        border: null,
      ),
      child: ResponsiveLayout(
        padding: EdgeInsets.zero,
        child: CustomScrollView(
          physics: const BouncingScrollPhysics(),
          slivers: [
            SliverToBoxAdapter(
              child: _buildContent(themeManager, theme),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildContent(ThemeManager themeManager, AppThemeConfig theme) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildHeaderSection(theme),
          const SizedBox(height: 24),
          _buildAppearanceSection(themeManager, theme),
          const SizedBox(height: 24),
          _buildThemesSection(themeManager, theme),
        ],
      ),
    );
  }

  Widget _buildHeaderSection(AppThemeConfig theme) {
    return AdaptiveCard(
      padding: const EdgeInsets.all(20),
      backgroundColor: theme.displayColor,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                CupertinoIcons.paintbrush,
                color: theme.primaryColor,
                size: 28,
              ),
              const SizedBox(width: 12),
              Text(
                'Personalization',
                style: TextStyle(
                  fontSize: 28,
                  fontWeight: FontWeight.bold,
                  color: theme.textColor,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Text(
            'Customize the appearance of your calculator with themes and color schemes.',
            style: TextStyle(
              fontSize: 16,
              color: theme.textColor.withOpacity(0.7),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAppearanceSection(
      ThemeManager themeManager, AppThemeConfig theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.only(left: 16, bottom: 8),
          child: Text(
            'APPEARANCE',
            style: TextStyle(
              fontSize: 13,
              fontWeight: FontWeight.w600,
              color: theme.primaryColor,
            ),
          ),
        ),
        AdaptiveCard(
          backgroundColor: theme.displayColor,
          padding: EdgeInsets.zero,
          child: CupertinoListTile(
            backgroundColor: theme.displayColor,
            leading: Icon(
              themeManager.isDarkMode
                  ? CupertinoIcons.moon_fill
                  : CupertinoIcons.sun_max_fill,
              color: theme.primaryColor,
            ),
            title: Text(
              'Dark Mode',
              style: TextStyle(color: theme.textColor),
            ),
            subtitle: Text(
              'Switch between light and dark themes',
              style: TextStyle(
                color: theme.textColor.withOpacity(0.7),
                fontSize: 14,
              ),
            ),
            trailing: BouncingButton(
              onPressed: () async {
                await themeManager.toggleDarkMode();
              },
              child: CupertinoSwitch(
                value: themeManager.isDarkMode,
                activeColor: theme.primaryColor,
                onChanged: (value) async {
                  await themeManager.toggleDarkMode();
                },
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildThemesSection(ThemeManager themeManager, AppThemeConfig theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.only(left: 16, bottom: 8),
          child: Text(
            'COLOR THEMES',
            style: TextStyle(
              fontSize: 13,
              fontWeight: FontWeight.w600,
              color: theme.primaryColor,
            ),
          ),
        ),
        AdaptiveCard(
          backgroundColor: theme.displayColor,
          padding: EdgeInsets.zero,
          child: Column(
            children: themeManager.availableThemes.map((availableTheme) {
              final isSelected = availableTheme.id == theme.id;
              return BouncingButton(
                onPressed: () async {
                  await themeManager.setTheme(availableTheme.id);
                },
                child: CupertinoListTile(
                  backgroundColor: Colors.transparent,
                  leading: Container(
                    width: 24,
                    height: 24,
                    decoration: BoxDecoration(
                      color: availableTheme.primaryColor,
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(
                        color: theme.textColor.withOpacity(0.1),
                        width: 2,
                      ),
                    ),
                  ),
                  title: Text(
                    availableTheme.name,
                    style: TextStyle(
                      color: theme.textColor,
                      fontWeight:
                          isSelected ? FontWeight.w600 : FontWeight.normal,
                    ),
                  ),
                  trailing: AnimatedOpacity(
                    duration: const Duration(milliseconds: 200),
                    opacity: isSelected ? 1.0 : 0.0,
                    child: Icon(
                      CupertinoIcons.checkmark_circle_fill,
                      color: theme.primaryColor,
                    ),
                  ),
                ),
              );
            }).toList(),
          ),
        ),
      ],
    );
  }
}

================
File: lib/widgets/reponsive_widget.dart
================
import 'package:flutter/cupertino.dart';
import 'dart:math' as math;

/// ResponsiveLayout provides adaptive sizing based on screen dimensions
class ResponsiveLayout extends StatelessWidget {
  final Widget child;
  final EdgeInsets padding;
  final bool safeArea;

  const ResponsiveLayout({
    super.key,
    required this.child,
    this.padding = const EdgeInsets.all(16),
    this.safeArea = true,
  });

  @override
  Widget build(BuildContext context) {
    final mediaQuery = MediaQuery.of(context);
    final width = mediaQuery.size.width;
    final height = mediaQuery.size.height;
    
    Widget content = ConstrainedBox(
      constraints: BoxConstraints(
        maxWidth: math.min(width, 800), // Max width for large screens
        maxHeight: height,
      ),
      child: Padding(
        padding: padding,
        child: child,
      ),
    );

    if (safeArea) {
      content = SafeArea(child: content);
    }

    return Center(child: content);
  }
}

/// CustomPageRoute provides a customizable page transition
class CustomPageRoute extends CupertinoPageRoute {
  final bool slideUp;

  CustomPageRoute({
    required Widget child,
    this.slideUp = false,
  }) : super(
    builder: (context) => child,
    fullscreenDialog: slideUp,
  );
}

/// AdaptiveCard provides a consistent card design across the app
class AdaptiveCard extends StatelessWidget {
  final Widget child;
  final EdgeInsets padding;
  final double borderRadius;
  final Color? backgroundColor;
  final List<BoxShadow>? boxShadow;

  const AdaptiveCard({
    super.key,
    required this.child,
    this.padding = const EdgeInsets.all(16),
    this.borderRadius = 12,
    this.backgroundColor,
    this.boxShadow,
  });

  @override
  Widget build(BuildContext context) {
    final theme = CupertinoTheme.of(context);
    final isDark = theme.brightness == Brightness.dark;

    return Container(
      decoration: BoxDecoration(
        color: backgroundColor ?? (isDark ? CupertinoColors.systemGrey6.darkColor : CupertinoColors.white),
        borderRadius: BorderRadius.circular(borderRadius),
        boxShadow: boxShadow ?? [
          BoxShadow(
            color: CupertinoColors.systemGrey.withOpacity(isDark ? 0.3 : 0.1),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      padding: padding,
      child: child,
    );
  }
}

/// BouncingButton provides a physical button press animation
class BouncingButton extends StatefulWidget {
  final Widget child;
  final VoidCallback onPressed;
  final Duration duration;
  final double scale;

  const BouncingButton({
    super.key,
    required this.child,
    required this.onPressed,
    this.duration = const Duration(milliseconds: 150),
    this.scale = 0.95,
  });

  @override
  State<BouncingButton> createState() => _BouncingButtonState();
}

class _BouncingButtonState extends State<BouncingButton> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: widget.duration,
    );
    
    _scaleAnimation = Tween<double>(
      begin: 1.0,
      end: widget.scale,
    ).animate(
      CurvedAnimation(
        parent: _controller,
        curve: Curves.easeInOut,
      ),
    );
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  void _handleTapDown(_) {
    _controller.forward();
  }

  void _handleTapUp(_) {
    _controller.reverse();
  }

  void _handleTapCancel() {
    _controller.reverse();
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTapDown: _handleTapDown,
      onTapUp: _handleTapUp,
      onTapCancel: _handleTapCancel,
      onTap: widget.onPressed,
      child: ScaleTransition(
        scale: _scaleAnimation,
        child: widget.child,
      ),
    );
  }
}

/// AdaptiveButton provides a consistent button design
class AdaptiveButton extends StatelessWidget {
  final String text;
  final VoidCallback onPressed;
  final Color? backgroundColor;
  final Color? textColor;
  final EdgeInsets padding;
  final double borderRadius;
  final bool isDestructive;
  final bool isLoading;

  const AdaptiveButton({
    super.key,
    required this.text,
    required this.onPressed,
    this.backgroundColor,
    this.textColor,
    this.padding = const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
    this.borderRadius = 12,
    this.isDestructive = false,
    this.isLoading = false,
  });

  @override
  Widget build(BuildContext context) {
    final theme = CupertinoTheme.of(context);
    
    final baseColor = backgroundColor ?? 
      (isDestructive ? CupertinoColors.systemRed : theme.primaryColor);
    
    final buttonTextColor = textColor ?? 
      (backgroundColor != null ? theme.primaryContrastingColor : CupertinoColors.white);

    return BouncingButton(
      onPressed: isLoading ? () {} : onPressed,
      child: Container(
        decoration: BoxDecoration(
          color: isLoading ? baseColor.withOpacity(0.6) : baseColor,
          borderRadius: BorderRadius.circular(borderRadius),
        ),
        padding: padding,
        child: Center(
          child: isLoading
              ? const CupertinoActivityIndicator(color: CupertinoColors.white)
              : Text(
                  text,
                  style: TextStyle(
                    color: buttonTextColor,
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                  ),
                ),
        ),
      ),
    );
  }
}

/// ResponsiveGrid provides a responsive grid layout
class ResponsiveGrid extends StatelessWidget {
  final List<Widget> children;
  final double spacing;
  final double runSpacing;
  final int minCrossAxisCount;
  final int maxCrossAxisCount;

  const ResponsiveGrid({
    super.key,
    required this.children,
    this.spacing = 16,
    this.runSpacing = 16,
    this.minCrossAxisCount = 2,
    this.maxCrossAxisCount = 6,
  });

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        final width = constraints.maxWidth;
        final crossAxisCount = math.min(
          math.max(
            (width / 150).floor(), // Minimum item width of 150
            minCrossAxisCount,
          ),
          maxCrossAxisCount,
        );

        return Wrap(
          spacing: spacing,
          runSpacing: runSpacing,
          children: children.map((child) {
            final itemWidth = (width - (spacing * (crossAxisCount - 1))) / crossAxisCount;
            return SizedBox(
              width: itemWidth,
              child: child,
            );
          }).toList(),
        );
      },
    );
  }
}

/// SpringScrollConfiguration provides iOS-style scrolling
class SpringScrollConfiguration extends ScrollBehavior {
  @override
  ScrollPhysics getScrollPhysics(BuildContext context) {
    return const BouncingScrollPhysics();
  }
}

/// AdaptiveSegmentedControl provides a themed segmented control
class AdaptiveSegmentedControl extends StatelessWidget {
  final Map<int, Widget> children;
  final int groupValue;
  final ValueChanged<int> onValueChanged;

  const AdaptiveSegmentedControl({
    super.key,
    required this.children,
    required this.groupValue,
    required this.onValueChanged,
  });

  @override
  Widget build(BuildContext context) {
    return CupertinoSegmentedControl<int>(
      children: children,
      groupValue: groupValue,
      onValueChanged: onValueChanged,
      padding: EdgeInsets.zero,
    );
  }
}

================
File: lib/main.dart
================
import 'package:flutter/cupertino.dart';

import 'package:myapp/screens/calculator_page.dart';

import 'managers/theme_manager.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  final themeManager = ThemeManager();
  await themeManager.initialize();

  runApp(CalculatorApp(themeManager: themeManager));
}

class CalculatorApp extends StatelessWidget {
  final ThemeManager themeManager;

  const CalculatorApp({super.key, required this.themeManager});

  @override
  Widget build(BuildContext context) {
    return ThemeProvider(
      themeManager: themeManager,
      child: CupertinoApp(
        theme: CupertinoThemeData(
          brightness:
              themeManager.isDarkMode ? Brightness.dark : Brightness.light,
          primaryColor: themeManager.currentTheme.primaryColor,
        ),
        home: const CalculatorPage(),
      ),
    );
  }
}

================
File: test/widget_test.dart
================
// This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';



void main() {
  testWidgets('Counter increments smoke test', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    //await tester.pumpWidget(const MyApp());

    // Verify that our counter starts at 0.
    expect(find.text('0'), findsOneWidget);
    expect(find.text('1'), findsNothing);

    // Tap the '+' icon and trigger a frame.
    await tester.tap(find.byIcon(Icons.add));
    await tester.pump();

    // Verify that our counter has incremented.
    expect(find.text('0'), findsNothing);
    expect(find.text('1'), findsOneWidget);
  });
}

================
File: web/index.html
================
<!DOCTYPE html>
<html>
<head>
  <!--
    If you are serving your web app in a path other than the root, change the
    href value below to reflect the base path you are serving from.

    The path provided below has to start and end with a slash "/" in order for
    it to work correctly.

    For more details:
    * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base

    This is a placeholder for base href that will be replaced by the value of
    the `--base-href` argument provided to `flutter build`.
  -->
  <base href="$FLUTTER_BASE_HREF">

  <meta charset="UTF-8">
  <meta content="IE=Edge" http-equiv="X-UA-Compatible">
  <meta name="description" content="A new Flutter project.">

  <!-- iOS meta tags & icons -->
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black">
  <meta name="apple-mobile-web-app-title" content="myapp">
  <link rel="apple-touch-icon" href="icons/Icon-192.png">

  <!-- Favicon -->
  <link rel="icon" type="image/png" href="favicon.png"/>

  <title>myapp</title>
  <link rel="manifest" href="manifest.json">
</head>
<body>
  <script src="flutter_bootstrap.js" async></script>
</body>
</html>

================
File: web/manifest.json
================
{
    "name": "myapp",
    "short_name": "myapp",
    "start_url": ".",
    "display": "standalone",
    "background_color": "#0175C2",
    "theme_color": "#0175C2",
    "description": "A new Flutter project.",
    "orientation": "portrait-primary",
    "prefer_related_applications": false,
    "icons": [
        {
            "src": "icons/Icon-192.png",
            "sizes": "192x192",
            "type": "image/png"
        },
        {
            "src": "icons/Icon-512.png",
            "sizes": "512x512",
            "type": "image/png"
        },
        {
            "src": "icons/Icon-maskable-192.png",
            "sizes": "192x192",
            "type": "image/png",
            "purpose": "maskable"
        },
        {
            "src": "icons/Icon-maskable-512.png",
            "sizes": "512x512",
            "type": "image/png",
            "purpose": "maskable"
        }
    ]
}

================
File: .firebaserc
================
{}

================
File: .gitignore
================
# Miscellaneous
*.class
*.log
*.pyc
*.swp
.DS_Store
.atom/
.buildlog/
.history
.svn/
migrate_working_dir/

# IntelliJ related
*.iml
*.ipr
*.iws
.idea/

# The .vscode folder contains launch configuration and tasks you configure in
# VS Code which you may wish to be included in version control, so this line
# is commented out by default.
#.vscode/

# Flutter/Dart/Pub related
**/doc/api/
**/ios/Flutter/.last_build_id
.dart_tool/
.flutter-plugins
.flutter-plugins-dependencies
.pub-cache/
.pub/
/build/

# Symbolication related
app.*.symbols

# Obfuscation related
app.*.map.json

# Android Studio will place build artifacts here
/android/app/debug
/android/app/profile
/android/app/release

================
File: .metadata
================
# This file tracks properties of this Flutter project.
# Used by Flutter tool to assess capabilities and perform upgrades etc.
#
# This file should be version controlled and should not be manually edited.

version:
  revision: "2663184aa79047d0a33a14a3b607954f8fdd8730"
  channel: "stable"

project_type: app

# Tracks metadata for the flutter migrate command
migration:
  platforms:
    - platform: root
      create_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730
      base_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730
    - platform: android
      create_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730
      base_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730
    - platform: web
      create_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730
      base_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730

  # User provided section

  # List of Local paths (relative to this file) that should be
  # ignored by the migrate tool.
  #
  # Files that are not part of the templates will be ignored by default.
  unmanaged_files:
    - 'lib/main.dart'
    - 'ios/Runner.xcodeproj/project.pbxproj'

================
File: analysis_options.yaml
================
# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options

================
File: firebase.json
================
{
  "firestore": {
    "rules": "firestore.rules",
    "indexes": "firestore.indexes.json"
  }
}

================
File: firestore.indexes.json
================
{
  
  "indexes": [],
  "fieldOverrides": []
}

================
File: firestore.rules
================
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      // This rule allows anyone with your database reference to view, edit,
      // and delete all data in your database. It is useful for getting
      // started, but it is configured to expire after 30 days because it
      // leaves your app open to attackers. At that time, all client
      // requests to your database will be denied.
      //
      // Make sure to write security rules for your app before that time, or
      // else all client requests to your database will be denied until you
      // update your rules.
      allow read, write: if request.time < timestamp.date(2024, 12, 4);
    }
  }
}

================
File: pubspec.lock
================
# Generated by pub
# See https://dart.dev/tools/pub/glossary#lockfile
packages:
  async:
    dependency: transitive
    description:
      name: async
      sha256: "947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c"
      url: "https://pub.dev"
    source: hosted
    version: "2.11.0"
  boolean_selector:
    dependency: transitive
    description:
      name: boolean_selector
      sha256: "6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  characters:
    dependency: transitive
    description:
      name: characters
      sha256: "04a925763edad70e8443c99234dc3328f442e811f1d8fd1a72f1c8ad0f69a605"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  clock:
    dependency: transitive
    description:
      name: clock
      sha256: cb6d7f03e1de671e34607e909a7213e31d7752be4fb66a86d29fe1eb14bfb5cf
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  collection:
    dependency: transitive
    description:
      name: collection
      sha256: ee67cb0715911d28db6bf4af1026078bd6f0128b07a5f66fb2ed94ec6783c09a
      url: "https://pub.dev"
    source: hosted
    version: "1.18.0"
  cupertino_icons:
    dependency: "direct main"
    description:
      name: cupertino_icons
      sha256: ba631d1c7f7bef6b729a622b7b752645a2d076dba9976925b8f25725a30e1ee6
      url: "https://pub.dev"
    source: hosted
    version: "1.0.8"
  fake_async:
    dependency: transitive
    description:
      name: fake_async
      sha256: "511392330127add0b769b75a987850d136345d9227c6b94c96a04cf4a391bf78"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.1"
  ffi:
    dependency: transitive
    description:
      name: ffi
      sha256: "16ed7b077ef01ad6170a3d0c57caa4a112a38d7a2ed5602e0aca9ca6f3d98da6"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.3"
  file:
    dependency: transitive
    description:
      name: file
      sha256: a3b4f84adafef897088c160faf7dfffb7696046cb13ae90b508c2cbc95d3b8d4
      url: "https://pub.dev"
    source: hosted
    version: "7.0.1"
  flutter:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_lints:
    dependency: "direct dev"
    description:
      name: flutter_lints
      sha256: "3f41d009ba7172d5ff9be5f6e6e6abb4300e263aab8866d2a0842ed2a70f8f0c"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.0"
  flutter_test:
    dependency: "direct dev"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_web_plugins:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  intl:
    dependency: "direct main"
    description:
      name: intl
      sha256: d6f56758b7d3014a48af9701c085700aac781a92a87a62b1333b46d8879661cf
      url: "https://pub.dev"
    source: hosted
    version: "0.19.0"
  leak_tracker:
    dependency: transitive
    description:
      name: leak_tracker
      sha256: "3f87a60e8c63aecc975dda1ceedbc8f24de75f09e4856ea27daf8958f2f0ce05"
      url: "https://pub.dev"
    source: hosted
    version: "10.0.5"
  leak_tracker_flutter_testing:
    dependency: transitive
    description:
      name: leak_tracker_flutter_testing
      sha256: "932549fb305594d82d7183ecd9fa93463e9914e1b67cacc34bc40906594a1806"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.5"
  leak_tracker_testing:
    dependency: transitive
    description:
      name: leak_tracker_testing
      sha256: "6ba465d5d76e67ddf503e1161d1f4a6bc42306f9d66ca1e8f079a47290fb06d3"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.1"
  lints:
    dependency: transitive
    description:
      name: lints
      sha256: "976c774dd944a42e83e2467f4cc670daef7eed6295b10b36ae8c85bcbf828235"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.0"
  matcher:
    dependency: transitive
    description:
      name: matcher
      sha256: d2323aa2060500f906aa31a895b4030b6da3ebdcc5619d14ce1aada65cd161cb
      url: "https://pub.dev"
    source: hosted
    version: "0.12.16+1"
  material_color_utilities:
    dependency: transitive
    description:
      name: material_color_utilities
      sha256: f7142bb1154231d7ea5f96bc7bde4bda2a0945d2806bb11670e30b850d56bdec
      url: "https://pub.dev"
    source: hosted
    version: "0.11.1"
  meta:
    dependency: transitive
    description:
      name: meta
      sha256: bdb68674043280c3428e9ec998512fb681678676b3c54e773629ffe74419f8c7
      url: "https://pub.dev"
    source: hosted
    version: "1.15.0"
  path:
    dependency: transitive
    description:
      name: path
      sha256: "087ce49c3f0dc39180befefc60fdb4acd8f8620e5682fe2476afd0b3688bb4af"
      url: "https://pub.dev"
    source: hosted
    version: "1.9.0"
  path_provider_linux:
    dependency: transitive
    description:
      name: path_provider_linux
      sha256: f7a1fe3a634fe7734c8d3f2766ad746ae2a2884abe22e241a8b301bf5cac3279
      url: "https://pub.dev"
    source: hosted
    version: "2.2.1"
  path_provider_platform_interface:
    dependency: transitive
    description:
      name: path_provider_platform_interface
      sha256: "88f5779f72ba699763fa3a3b06aa4bf6de76c8e5de842cf6f29e2e06476c2334"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  path_provider_windows:
    dependency: transitive
    description:
      name: path_provider_windows
      sha256: bd6f00dbd873bfb70d0761682da2b3a2c2fccc2b9e84c495821639601d81afe7
      url: "https://pub.dev"
    source: hosted
    version: "2.3.0"
  platform:
    dependency: transitive
    description:
      name: platform
      sha256: "5d6b1b0036a5f331ebc77c850ebc8506cbc1e9416c27e59b439f917a902a4984"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.6"
  plugin_platform_interface:
    dependency: transitive
    description:
      name: plugin_platform_interface
      sha256: "4820fbfdb9478b1ebae27888254d445073732dae3d6ea81f0b7e06d5dedc3f02"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.8"
  shared_preferences:
    dependency: "direct main"
    description:
      name: shared_preferences
      sha256: "746e5369a43170c25816cc472ee016d3a66bc13fcf430c0bc41ad7b4b2922051"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.2"
  shared_preferences_android:
    dependency: transitive
    description:
      name: shared_preferences_android
      sha256: "3b9febd815c9ca29c9e3520d50ec32f49157711e143b7a4ca039eb87e8ade5ab"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.3"
  shared_preferences_foundation:
    dependency: transitive
    description:
      name: shared_preferences_foundation
      sha256: "07e050c7cd39bad516f8d64c455f04508d09df104be326d8c02551590a0d513d"
      url: "https://pub.dev"
    source: hosted
    version: "2.5.3"
  shared_preferences_linux:
    dependency: transitive
    description:
      name: shared_preferences_linux
      sha256: "580abfd40f415611503cae30adf626e6656dfb2f0cee8f465ece7b6defb40f2f"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  shared_preferences_platform_interface:
    dependency: transitive
    description:
      name: shared_preferences_platform_interface
      sha256: "57cbf196c486bc2cf1f02b85784932c6094376284b3ad5779d1b1c6c6a816b80"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  shared_preferences_web:
    dependency: transitive
    description:
      name: shared_preferences_web
      sha256: d2ca4132d3946fec2184261726b355836a82c33d7d5b67af32692aff18a4684e
      url: "https://pub.dev"
    source: hosted
    version: "2.4.2"
  shared_preferences_windows:
    dependency: transitive
    description:
      name: shared_preferences_windows
      sha256: "94ef0f72b2d71bc3e700e025db3710911bd51a71cefb65cc609dd0d9a982e3c1"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  sky_engine:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.99"
  source_span:
    dependency: transitive
    description:
      name: source_span
      sha256: "53e943d4206a5e30df338fd4c6e7a077e02254531b138a15aec3bd143c1a8b3c"
      url: "https://pub.dev"
    source: hosted
    version: "1.10.0"
  stack_trace:
    dependency: transitive
    description:
      name: stack_trace
      sha256: "73713990125a6d93122541237550ee3352a2d84baad52d375a4cad2eb9b7ce0b"
      url: "https://pub.dev"
    source: hosted
    version: "1.11.1"
  stream_channel:
    dependency: transitive
    description:
      name: stream_channel
      sha256: ba2aa5d8cc609d96bbb2899c28934f9e1af5cddbd60a827822ea467161eb54e7
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  string_scanner:
    dependency: transitive
    description:
      name: string_scanner
      sha256: "556692adab6cfa87322a115640c11f13cb77b3f076ddcc5d6ae3c20242bedcde"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.0"
  term_glyph:
    dependency: transitive
    description:
      name: term_glyph
      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84
      url: "https://pub.dev"
    source: hosted
    version: "1.2.1"
  test_api:
    dependency: transitive
    description:
      name: test_api
      sha256: "5b8a98dafc4d5c4c9c72d8b31ab2b23fc13422348d2997120294d3bac86b4ddb"
      url: "https://pub.dev"
    source: hosted
    version: "0.7.2"
  vector_math:
    dependency: transitive
    description:
      name: vector_math
      sha256: "80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  vm_service:
    dependency: transitive
    description:
      name: vm_service
      sha256: "5c5f338a667b4c644744b661f309fb8080bb94b18a7e91ef1dbd343bed00ed6d"
      url: "https://pub.dev"
    source: hosted
    version: "14.2.5"
  web:
    dependency: transitive
    description:
      name: web
      sha256: cd3543bd5798f6ad290ea73d210f423502e71900302dde696f8bff84bf89a1cb
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  xdg_directories:
    dependency: transitive
    description:
      name: xdg_directories
      sha256: "7a3f37b05d989967cdddcbb571f1ea834867ae2faa29725fd085180e0883aa15"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
sdks:
  dart: ">=3.5.3 <4.0.0"
  flutter: ">=3.24.0"

================
File: pubspec.yaml
================
name: myapp
description: "A new Flutter project."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: ^3.5.3

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter


  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.8
  intl: ^0.19.0
  #firebase_analytics: ^11.3.3
  #easy_ads_flutter: ^2.7.0
  shared_preferences: ^2.3.2

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^4.0.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/to/resolution-aware-images

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/to/asset-from-package

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/to/font-from-package

================
File: README.md
================
# Calculator Plus - History & Notes

![Platform](https://img.shields.io/badge/Platform-iOS%20%7C%20Android-blue)
![Flutter](https://img.shields.io/badge/Flutter-3.5.3-blue)
![License](https://img.shields.io/badge/License-MIT-green)

A beautifully designed calculator app for iOS and Android that brings professional-grade calculation capabilities with a modern twist. Built with Flutter and following Apple's Cupertino design guidelines, Calculator Plus offers a seamless and intuitive experience across all devices.

## ✨ Features

### Core Features
- Clean, modern Cupertino-style interface
- Smooth animations and transitions
- Real-time calculation display
- Comprehensive calculation history
- Note-taking capability for calculations
- Multi-theme support with dark mode

### Advanced Features
- Calculation naming and organization
- Customizable themes
  - Light and dark mode
  - Multiple color schemes
  - Professional UI elements
- Gesture-based history management
- Responsive layout for all screen sizes

### Premium Features
- Ad-free experience
- History export capabilities
- Custom theme creation
- Cloud backup
- Scientific calculator mode
- Currency converter

## 📱 Screenshots

[Place your screenshots here]

## 🎯 Technical Details

### Built With
- Flutter SDK ^3.5.3
- Cupertino (iOS-style) design
- Custom animations and transitions
- Responsive layout system
- Theme management system
- Local data persistence

### Dependencies
- `cupertino_icons: ^1.0.8` - iOS-style icons
- `intl: ^0.19.0` - Internationalization and formatting
- `shared_preferences: ^2.3.2` - Local storage
- Additional premium feature dependencies

## 🚀 Getting Started

### Prerequisites
- Flutter SDK (^3.5.3)
- Dart SDK (^3.5.3)
- iOS/Android development environment

### Installation

1. Clone the repository
```bash
git clone https://github.com/truthysystems/calculator-plus.git
```

2. Install dependencies
```bash
flutter pub get
```

3. Run the app
```bash
flutter run
```

## 🎨 Design Philosophy

Calculator Plus follows a user-first design approach with:
- Clean, minimalist interface
- Intuitive gesture controls
- Smooth, responsive animations
- Professional color schemes
- Accessibility considerations
- Platform-specific design elements

## 🛠 Architecture

The app follows a clean architecture pattern with:
- Separation of concerns
- Manageable state handling
- Efficient theme management
- Responsive design system
- Premium feature integration

## 👥 Contributing

We welcome contributions to Calculator Plus! Please read our contributing guidelines before submitting pull requests.

## 📄 License

This project is licensed under the MIT License - see the LICENSE file for details.

## 📱 Support

For support, please email support@truthysystems.com or visit our website at www.truthysystems.com

## 🙋‍♂️ Authors

- **Truthy Systems** - *Initial work* - [truthysystems](https://github.com/truthysystems)

---

<p align="center">Made with ❤️ by Truthy Systems</p>
